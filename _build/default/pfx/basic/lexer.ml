# 1 "pfx/basic/lexer.mll"
 
  open Parser
  (* open Location *)

  (* type token = 
  | EOF | ADD | SUB | MUL | DIV | REM | LPAR | RPAR 
  | INT of int  *)

  let print_token = function 
  | EOF   -> print_string "EOF " 
  | ADD   -> print_string "ADD "
  | SUB   -> print_string "SUB "
  | MUL   -> print_string "MUL "
  | DIV   -> print_string "DIV "
  | REM   -> print_string "REM "
  | POP   -> print_string "POP "
  | SWAP  -> print_string "SWAP "
  | PUSH  -> print_string "PUSH "
  | INT n -> print_int n ; print_string " " 

  let mk_int nb =
    try INT (int_of_string nb)
    with Failure _ -> failwith (Printf.sprintf "Illegal integer '%s': " nb)

# 27 "pfx/basic/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\242\255\000\000\000\000\000\000\001\000\002\000\002\000\
    \010\000\001\000\253\255\006\000\255\255\001\000\006\000\003\000\
    \250\255\001\000\001\000\249\255\001\000\244\255\000\000\248\255\
    \002\000\247\255\001\000\246\255\001\000\010\000\245\255\000\000\
    \243\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\013\000\013\000\013\000\013\000\013\000\013\000\
    \004\000\013\000\255\255\001\000\255\255\000\000\003\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\255\255\014\000\255\255\
    \000\000\255\255\255\255\000\000\255\255\000\000\255\255\000\000\
    \255\255\000\000\255\255\000\000\255\255\255\255\000\000\255\255\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\011\000\012\000\012\000\011\000\013\000\011\000\011\000\
    \255\255\000\000\011\000\255\255\011\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\009\000\014\000\000\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\020\000\019\000\004\000\026\000\015\000\016\000\
    \032\000\024\000\000\000\000\000\023\000\005\000\027\000\029\000\
    \002\000\021\000\003\000\006\000\031\000\028\000\022\000\018\000\
    \025\000\017\000\030\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\013\000\000\000\000\000\000\000\011\000\
    \014\000\255\255\011\000\014\000\011\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\011\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\009\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\017\000\018\000\000\000\003\000\007\000\015\000\
    \031\000\004\000\255\255\255\255\022\000\000\000\026\000\002\000\
    \000\000\020\000\000\000\000\000\028\000\002\000\005\000\006\000\
    \024\000\006\000\029\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\014\000\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 33 "pfx/basic/lexer.mll"
            ( token lexbuf )
# 138 "pfx/basic/lexer.ml"

  | 1 ->
# 35 "pfx/basic/lexer.mll"
            ( token lexbuf )
# 143 "pfx/basic/lexer.ml"

  | 2 ->
# 37 "pfx/basic/lexer.mll"
             ( EOF )
# 148 "pfx/basic/lexer.ml"

  | 3 ->
# 39 "pfx/basic/lexer.mll"
                            ( token lexbuf )
# 153 "pfx/basic/lexer.ml"

  | 4 ->
let
# 41 "pfx/basic/lexer.mll"
              nb
# 159 "pfx/basic/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 41 "pfx/basic/lexer.mll"
                           ( mk_int nb )
# 163 "pfx/basic/lexer.ml"

  | 5 ->
# 44 "pfx/basic/lexer.mll"
           (ADD)
# 168 "pfx/basic/lexer.ml"

  | 6 ->
# 45 "pfx/basic/lexer.mll"
           (SUB)
# 173 "pfx/basic/lexer.ml"

  | 7 ->
# 46 "pfx/basic/lexer.mll"
           (MUL)
# 178 "pfx/basic/lexer.ml"

  | 8 ->
# 47 "pfx/basic/lexer.mll"
           (DIV)
# 183 "pfx/basic/lexer.ml"

  | 9 ->
# 48 "pfx/basic/lexer.mll"
           (REM)
# 188 "pfx/basic/lexer.ml"

  | 10 ->
# 49 "pfx/basic/lexer.mll"
           (POP)
# 193 "pfx/basic/lexer.ml"

  | 11 ->
# 50 "pfx/basic/lexer.mll"
           (SWAP)
# 198 "pfx/basic/lexer.ml"

  | 12 ->
# 51 "pfx/basic/lexer.mll"
           (PUSH)
# 203 "pfx/basic/lexer.ml"

  | 13 ->
let
# 54 "pfx/basic/lexer.mll"
         c
# 209 "pfx/basic/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 54 "pfx/basic/lexer.mll"
                            ( failwith (Printf.sprintf "Illegal character '%c': " c) )
# 213 "pfx/basic/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

# 63 "pfx/basic/lexer.mll"
 
  
  (* Main function commented so the program uses directly the function in the pfxVM.ml *)
  
  (* let rec examine_all lexbuf = 
    let result = token lexbuf in 
    print_token result;
    print_string "";
    match result with
    | EOF -> ()
    | _ -> examine_all lexbuf

  let compile file =
  print_string ("File "^file^" is being treated!\n");
  try
    let input_file = open_in file in
    let lexbuf = Lexing.from_channel input_file in
    examine_all lexbuf;
    print_newline ();
    close_in (input_file)
  with Sys_error _ ->
    print_endline ("Can't find file '" ^ file ^ "'")
  let _ = Arg.parse [] compile "" *)


# 246 "pfx/basic/lexer.ml"

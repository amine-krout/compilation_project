AUTHORS
-------

- KROUT Mohamed Amine
- ROMDHANI Mohamed Mokhtar

===============

Description of the project
--------------------------

The project consists in implementing a compiler that takes a program written in a high-level language called expr and translates it into a low-level language called pfx. The expr language is a simple expression language that supports arithmetic operations, variables, and function definitions. The pfx language, on the other hand, is a stack-based language that operates on a stack of values and performs operations by pushing and popping values from the stack.

===============

Sources
-------

Git repository: https://github.com/amine-krout/compilation_project.git

===============

How to…
-------

…retrieve the sources?

  git clone https://github.com/amine-krout/compilation_project.git

…compile?

  dune …

…execute and test?

  dune utop and then use the libraries
  (from project root) dune exec expr/main.exe -- expr/basic/tests/an_example.expr
  dune exec pfx/pfxVM.exe -- pfx/basic/tests/ok_prog.pfx -a 12 -a 52

===============

Structure of the project
------------------------

The project consists of two main parts: the expr compiler and the pfx virtual machine.

The expr compiler is responsible for taking input in the expr language and compiling it into an equivalent program in the pfx language. It includes a lexer and parser for expr, as well as modules for evaluating expr expressions and converting expr code into pfx code.

The pfx virtual machine is responsible for executing programs in the pfx language. It includes a lexer and parser for pfx, as well as modules for evaluating pfx expressions and executing pfx code.

Additionally, the project includes a location module for representing locations in source code and a binOp module for defining binary operators used in both expr and pfx. The utils folder contains these modules as well as a dune file for building the project.

The project is organized into subdirectories for each part, with separate dune files for building each part. The basic subdirectories for each part contain modules that are common to both the expr and pfx compilers. Finally, the project includes a README file with information on how to use the compilers and run the tests.

Here is the file tree of the project :

├── _build
│   ├── default
│   │   ├── dune-project
│   │   ├── expr
│   │   ├── pfx
│   │   ├── README
│   │   └── utils
│   └── log
├── dune-project
├── expr
│   ├── basic
│   │   ├── ast.ml
│   │   ├── ast.mli
│   │   ├── dune
│   │   ├── eval.ml
│   │   ├── eval.mli
│   │   ├── lexer.mll
│   │   ├── parser.mly
│   │   ├── tests
│   │   ├── toPfx.ml
│   │   └── toPfx.mli
│   ├── common
│   │   ├── binOp.ml
│   │   ├── binOp.mli
│   │   └── dune
│   ├── compiler.ml
│   ├── dune
│   ├── fun
│   │   ├── ast.ml
│   │   ├── ast.mli
│   │   ├── lexer.mll
│   │   ├── parser.mly
│   │   ├── toPfx.ml
│   │   └── toPfx.mli
│   ├── main.ml
│   └── README
├── pfx
│   ├── basic
│   │   ├── ast.ml
│   │   ├── ast.mli
│   │   ├── dune
│   │   ├── eval.ml
│   │   ├── eval.mli
│   │   ├── lexer.mll
│   │   ├── parser.mly
│   │   └── tests
│   ├── dune
│   ├── fun
│   │   ├── ast.ml
│   │   ├── ast.mli
│   │   ├── eval.ml
│   │   ├── eval.mli
│   │   ├── lexer.mll
│   │   ├── parser.mly
│   │   └── tests
│   └── pfxVM.ml
├── README
└── utils
    ├── dune
    ├── location.ml
    └── location.mli

===============

Progress
--------

- We stopped at question 12 (proof of derivation)
- There is still some ambiguities in questions 10.3 and 11.2

===============

Know bugs and issues
--------------------

- We were not able to test functional part of the pfx that supports the lambda calculus.

===============

Helpful resources
-----------------

- Ocaml Documentation : https://www.ocaml.org/docs
- Dune Documentation : https://dune.readthedocs.io/en/stable/index.html
- Errors debugging and documentation : https://stackoverflow.com/ && https://chat.openai.com/chat

===============

Difficulties
------------

- We faced some difficulties with exercise 7 (Locating Errors)
- We didn't used git for sharing code just to stay away from merging errors that we've already faced in other projects
- The project was challenging especially that we've no experience with the OCaml language and it was really a good experience.

